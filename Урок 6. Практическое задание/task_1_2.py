"""
Задание 1.
Вам нужно взять 5 любых скриптов, написанных ВАМИ в рамках работы над ДЗ
курсов Алгоритмы и Основы Python
На каждый скрипт нужно два решения - исходное и оптимизированное.
Вы берете исходное, пишете что это за задание и с какого оно курса.
Далее выполняете профилирование скрипта средствами memory_profiler
Вы оптимизируете исходное решение.
Далее выполняете профилирование скрипта средствами memory_profiler
Вам нужно написать аналитику, что вы сделали для оптимизации памяти и
чего добились.
ВНИМАНИЕ:
1) скрипты для оптимизации нужно брать только из сделанных вами ДЗ
курсов Алгоритмы и Основы
2) нельзя дублировать, коды, показанные на уроке
3) для каждого из 5 скриптов у вас отдельный файл, в нем должна быть версия до
и версия после оптимизации
4) желательно выбрать те скрипты, где есть что оптимизировать и не брать те,
где с памятью и так все в порядке
5) не нужно писать преподавателю '''я не могу найти что оптимизировать''', это
отговорки. Примеров оптимизации мы перечислили много: переход с массивов на
генераторы, numpy, использование слотов, применение del, сериализация и т.д.
Это файл для второго скрипта
"""
from memory_profiler import profile, memory_usage


def memory(func):
    def wrapper(*args, **kwargs):
        m1 = memory_usage()
        res = func(*args)
        m2 = memory_usage()
        mem_diff = m2[0] - m1[0]
        print(f"Выполнение заняло {mem_diff} Mib")
        return res

    return wrapper


# исходная функция (урок 3 задание 1)
# @profile
@memory
def dict_create():
    new_dict = {}
    for i in range(1000):
        new_dict.setdefault(i, i)
    return new_dict


dict_create()
'''
Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
    29     19.8 MiB     19.8 MiB           1   @profile
    30                                         def dict_create():
    31     19.9 MiB      0.0 MiB           1       new_dict = {}
    32     19.9 MiB      0.0 MiB        1001       for i in range(1000):
    33     19.9 MiB      0.0 MiB        1000           new_dict.setdefault(i, i)
    34     19.9 MiB      0.0 MiB           1       return new_dict
'''


# производная функция


@memory
def dict_generator(num_objects):
    for i in range(num_objects):
        new_dict = {i: i}
        yield new_dict


dict_generator(1000)

# замерить генератор с помощью profile не удалось. Воспользовавшись memory usage показало,что использование
# генератора экономит память
#Выполнение заняло 0.07421875 Mib
#Выполнение заняло 0.0 Mib

